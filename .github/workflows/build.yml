name: Windows Build

on:
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    runs-on: windows-2025

    env:
      Boost_DIR: C:/Boost/lib/cmake/Boost-1.88.0
      DCMTK_DIR: C:/tools/dcmtk-20241211-ac00290
      OpenCV_DIR: C:/tools/opencv/build
      OpenJPEG_DIR: C:/Program Files (x86)/OPENJPEG
      Qt6_DIR: C:/Qt6/6.9.0/msvc2022_64/lib/cmake/Qt6

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Clone required forks
        run: |
          echo "Cloning core dev forks with OpenCV fixes..."
          git clone https://github.com/kaygdev/oct_cpp_framework.git
          git clone https://github.com/kaygdev/LibE2E.git
          git clone https://github.com/fzhem/LibOctData.git
          git clone --branch dev https://github.com/fzhem/OCT-Marker.git
          git clone https://github.com/kaygdev/convert_oct_data.git

      - name: Add missing boost find_package
        run: |
          (Get-Content ${{ github.workspace }}/oct_cpp_framework/CMakeLists.txt) -replace 'find_package\(OpenCV REQUIRED\)', "find_package(OpenCV REQUIRED)`r`nfind_package(Boost REQUIRED)" | Set-Content ${{ github.workspace }}/oct_cpp_framework/CMakeLists.txt
          (Get-Content ${{ github.workspace }}/LibE2E/CMakeLists.txt) -replace 'find_package\(OpenCV REQUIRED\)', "find_package(OpenCV REQUIRED)`r`nfind_package(Boost REQUIRED)" | Set-Content ${{ github.workspace }}/LibE2E/CMakeLists.txt

      - name: Restore OpenCV cache
        id: restore-opencv-cache
        uses: actions/cache/restore@v4
        with:
          key: opencv-4.11.0-windows-${{ runner.os }}
          path: C:/tools/opencv

      - name: Install OpenCV via Chocolatey
        if: steps.restore-opencv-cache.outputs.cache-hit != 'true'
        run: choco install opencv --version=4.11.0 -y --no-progress

      - name: Save OpenCV cache
        uses: actions/cache/save@v4
        if: steps.restore-opencv-cache.outputs.cache-hit != 'true'
        with:
          key: opencv-4.11.0-windows-${{ runner.os }}
          path: C:/tools/opencv

      - name: Download Zlib from source
        run: |
          curl -L -o C:/tools/zlib.zip https://zlib.net/zlib131.zip
          tar -xf C:/tools/zlib.zip -C C:/tools

      - name: Build Zlib
        shell: cmd
        run: |
          cd /d C:/tools/zlib-1.3.1
          mkdir build && cd build
          cmake .. -G "Visual Studio 17 2022"
          cmake --build . --config Release --target install

      - name: Restore Boost zip cache
        id: restore-boost-zip-cache
        uses: actions/cache/restore@v4
        with:
          key: boost-1.88.0-zip-${{ runner.os }}
          path: C:/tools/boost.zip

      - name: Download Boost from source
        if: steps.restore-boost-zip-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o C:/tools/boost.zip https://archives.boost.io/release/1.88.0/source/boost_1_88_0.zip
          mkdir C:/local
          tar -xf C:/tools/boost.zip -C C:/local

      - name: Save Boost zip cache
        uses: actions/cache/save@v4
        if: steps.restore-boost-zip-cache.outputs.cache-hit != 'true'
        with:
          key: boost-1.88.0-zip-${{ runner.os }}
          path: C:/tools/boost.zip

      - name: Restore Boost build cache
        id: restore-boost-build-cache
        uses: actions/cache/restore@v4
        with:
          key: boost-1.88.0-build-${{ runner.os }}
          path: C:/Boost

      - name: Run Boost Bootstrap Script
        if: steps.restore-boost-build-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d C:/local/boost_1_88_0
          bootstrap.bat

      - name: Build and Install Boost Libraries
        if: steps.restore-boost-build-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d C:/local/boost_1_88_0
          b2 -j%NUMBER_OF_PROCESSORS% --with-iostreams --with-locale --with-log --with-program_options --with-serialization --prefix=C:/Boost install

      - name: Save Boost build cache
        uses: actions/cache/save@v4
        if: steps.restore-boost-build-cache.outputs.cache-hit != 'true'
        with:
          key: boost-1.88.0-build-${{ runner.os }}
          path: C:/Boost

      - name: Clone OpenJPEG
        run: |
          cd C:/repos
          git clone --branch v2.5.3 https://github.com/uclouvain/openjpeg.git

      - name: Build OpenJPEG
        run: |
          cd C:/repos/openjpeg
          cmake -G "Visual Studio 17 2022" .
          cmake --build . --config Release --target install

      - name: Download libtiff from source
        run: |
          curl -L -o C:/tools/tiff.zip https://download.osgeo.org/libtiff/tiff-4.7.0.zip
          tar -xf C:/tools/tiff.zip -C C:/tools

      - name: Build libtiff
        shell: cmd
        run: |
          cd /d C:/tools/tiff-4.7.0
          cmake -G "Visual Studio 17 2022" .
          cmake --build . --config Release --target install

      - name: Download DCMTK
        shell: cmd
        run: |
          curl -L -o C:/tools/dcmtk.zip https://github.com/DCMTK/dcmtk/releases/download/DCMTK-3.6.9/dcmtk-20241211-ac00290-win64.zip
          tar -xf C:/tools/dcmtk.zip -C C:/tools
          mkdir C:\dcmtk_support\libs\zlib-1.3\lib
          copy C:\tools\zlib-1.3.1\build\Release\zlib.lib C:\dcmtk_support\libs\zlib-1.3\lib\zlib_o.lib

      - name: Download doxygen
        shell: cmd
        run: |
          cd /d C:/tools 
          curl -L -o C:/tools/doxygen.zip https://www.doxygen.nl/files/doxygen-1.14.0.windows.x64.bin.zip
          mkdir doxygen && cd doxygen
          tar -xf ../doxygen.zip

      - name: Install graphviz (graphviz dot is required for doxygen)
        run: choco install graphviz --version=12.2.1 -y

      - name: Install dia (optional for doxygen)
        run: choco install dia --version=0.97.2.2 -y

      - name: Install mscgen (optional for doxygen)
        run: |
          curl -L -o C:/tools/mscgen.exe https://www.mcternan.me.uk/mscgen/software/mscgen_0.20.exe
          C:/tools/mscgen.exe /S

      - name: Install aqt
        shell: cmd
        run: |
          choco install aqt --version=3.2.1 -y

      - name: Restore Qt6 cache
        id: restore-qt6-cache
        uses: actions/cache/restore@v4
        with:
          key: qt6-6.9.0-win64-msvc2022_64-${{ runner.os }}
          path: C:/Qt6/6.9.0

      - name: Install Qt6
        shell: cmd
        if: steps.restore-qt6-cache.outputs.cache-hit != 'true'
        run: |
          cd /d C:/
          mkdir Qt6
          cd Qt6
          aqt install-qt windows desktop 6.9.0 win64_msvc2022_64

      - name: Save Qt6 cache
        uses: actions/cache/save@v4
        if: steps.restore-qt6-cache.outputs.cache-hit != 'true'
        with:
          key: qt6-6.9.0-win64-msvc2022_64-${{ runner.os }}
          path: C:/Qt6/6.9.0

      - name: Build oct_cpp_framework
        run: |
          cd oct_cpp_framework
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" ..
          cmake --build . --config Release

      - name: Build LibE2E
        run: |
          cd LibE2E
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" ..
          cmake --build . --config Release

      - name: Build LibOctData
        run: |
          cd LibOctData
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" `
            -DBUILD_WITH_SUPPORT_DICOM=ON `
            -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /DNOMINMAX /EHsc" `
            -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON ..
          cmake --build . --config Release

      - name: Fetch latest commit hash
        id: get_commit_hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $ENV:GITHUB_OUTPUT

      - name: Build OCT-Marker
        env:
          RELEASE_NAME: oct-marker-win32-x64-${{ steps.get_commit_hash.outputs.hash }}
        run: |
          cd OCT-Marker
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" `
            -DCREATE_DOCUMENTATION=ON `
            -DDOXYGEN_EXECUTABLE=C:\tools\doxygen\doxygen.exe ..
          cmake --build . --config Release
          Rename-Item -Path ".\Release" -NewName $env:RELEASE_NAME

      - name: Generate OCT-Marker docs
        shell: cmd
        run: |
          cd OCT-Marker/build
          cmake --build . --target doxygen

      - name: Build convert_oct_data
        run: |
          cd convert_oct_data
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" ..
          cmake --build . --config Release

      - name: Copy deps to OCT-Marker release
        env:
          Qt6_ROOT: C:/Qt6/6.9.0/msvc2022_64
          RELEASE_NAME: oct-marker-win32-x64-${{ steps.get_commit_hash.outputs.hash }}
          TIFF_RELEASE: C:/tools/tiff-4.7.0/libtiff/Release
          ZLIB_RELEASE: C:/tools/zlib-1.3.1/build/Release
        run: |
          cd OCT-Marker/build/$env:RELEASE_NAME

          cp ${{ github.workspace }}/LibOctData/build/Release/octdata.dll .
          cp ${{ github.workspace }}/convert_oct_data/build/Release/convert_oct_data.exe .

          cp ${{ github.workspace }}/OCT-Marker/build/octmarker-de.qm .
          mv ${{ github.workspace }}/OCT-Marker/build/html .
          mv ${{ github.workspace }}/OCT-Marker/build/latex .

          cp $env:DCMTK_DIR/bin/dcmdata.dll .
          cp $env:DCMTK_DIR/bin/oficonv.dll .
          cp $env:DCMTK_DIR/bin/oflog.dll .
          cp $env:DCMTK_DIR/bin/ofstd.dll .

          cp $env:opencv_dir/x64/vc16/bin/opencv_world4110.dll .
                    
          cp $env:OpenJPEG_DIR/bin/openjp2.dll .
          cp $env:TIFF_RELEASE/tiff.dll .
          cp $env:ZLIB_RELEASE/zlib.dll .

          & "$env:Qt6_ROOT/bin/windeployqt.exe" octmarker.exe

      - name: Create a zip flie
        env:
          RELEASE_NAME: oct-marker-win32-x64-${{ steps.get_commit_hash.outputs.hash }}
        run: |
          cd OCT-Marker/build
          powershell Compress-Archive -Path $env:RELEASE_NAME -DestinationPath "$env:RELEASE_NAME.zip"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME: oct-marker-win32-x64-${{ steps.get_commit_hash.outputs.hash }}
        with:
          files: OCT-Marker/build/${{ env.RELEASE_NAME }}.zip
          body: Release created automatically from workflow.
          draft: true
          tag_name: ${{ steps.get_commit_hash.outputs.hash }}
